grammar LanguageCompiler
#		'' dict:(a:(d:dict_line ' '* ( (';' ' '*) / ("\n"+ ' '*))+ )* l:dict_rule? ) [\s]* {
#			def entries
#				(dict.a.empty?() ? [] : dict.a.elements).collect{ |e| e.d } + [dict.l] 
#			end
#		}
	include Linguistics
	rule dict
		dict_line* {
			def entries
				elements.collect { |e| e unless e.empty? or e.is_comment? }.delete_if { |e| e == nil }
			end
		}
	end

	rule dict_line
		dict_rule / comment {
			def is_comment?
				true
			end
		}
	end

	rule comment
		' '* comment:'%' .* !(!"\n"  . )  {
			def is_comment?
				true
			end
		}
	end
	rule dict_rule
		[\s]* name:entry_class ' '* ':' ' '* equation:equation  [\s]* (';'+ ('%' .*)?)?  [\s]* <Entry>
	end
	rule entry_class
		class / instance / variable			<EntryName>
	end
	rule variable
		'$' [A-Z]+
	end
	rule class
		'@' [a-z]+ ('#' [a-z]+)*
	end
	rule instance
		[a-zA-Z_]* ('.' [a-z]+)?
	end
end
